# Hướng dẫn JSON Conversion trong .NET 8 + MySQL

## 1. Tạo Models

### ContentBlock.cs
```csharp
using System.ComponentModel.DataAnnotations;

namespace YourProject.Models
{
    public class ContentBlock
    {
        public int Order { get; set; }
        
        [Required]
        [StringLength(20)]
        public string Type { get; set; } = string.Empty; // "text", "image", "video", "link"
        
        [Required]
        public string Content { get; set; } = string.Empty;
    }
}
```

### ForumPost.cs
```csharp
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace YourProject.Models
{
    [Table("forum_posts")]
    public class ForumPost
    {
        [Key]
        [Column("id")]
        public long Id { get; set; }

        [Column("category_id")]
        public long CategoryId { get; set; }

        [Column("user_id")]
        public long UserId { get; set; }

        [Required]
        [StringLength(255)]
        [Column("title")]
        public string Title { get; set; } = string.Empty;

        [Column("content")]
        public List<ContentBlock> Content { get; set; } = new List<ContentBlock>();

        [Column("tags")]
        public List<string> Tags { get; set; } = new List<string>();

        [Column("view_count")]
        public long ViewCount { get; set; } = 0;

        [Column("reply_count")]
        public int ReplyCount { get; set; } = 0;

        [Column("like_count")]
        public int LikeCount { get; set; } = 0;

        [Column("dislike_count")]
        public int DislikeCount { get; set; } = 0;

        [Column("is_pinned")]
        public bool IsPinned { get; set; } = false;

        [Column("is_locked")]
        public bool IsLocked { get; set; } = false;

        [Required]
        [StringLength(20)]
        [Column("status")]
        public string Status { get; set; } = "published"; // "published", "draft", "moderated", "deleted"

        [Column("moderated_reason")]
        public string? ModeratedReason { get; set; }

        [Column("moderated_by")]
        public long? ModeratedBy { get; set; }

        [Column("last_activity_at")]
        public DateTime LastActivityAt { get; set; } = DateTime.UtcNow;

        [Column("created_at")]
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        [Column("updated_at")]
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        // Navigation Properties
        public virtual User? User { get; set; }
        public virtual ForumCategory? Category { get; set; }
        public virtual User? ModeratedByUser { get; set; }
        public virtual ICollection<ForumComment> Comments { get; set; } = new List<ForumComment>();
    }
}
```

## 2. DbContext Configuration

### ApplicationDbContext.cs
```csharp
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using YourProject.Models;

namespace YourProject.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        public DbSet<ForumPost> ForumPosts { get; set; }
        public DbSet<ForumCategory> ForumCategories { get; set; }
        public DbSet<User> Users { get; set; }
        // ... other DbSets

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // JSON Serializer Options
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = false
            };

            // ForumPost Content Configuration
            modelBuilder.Entity<ForumPost>()
                .Property(e => e.Content)
                .HasConversion(
                    v => v == null || !v.Any() ? "[]" : JsonSerializer.Serialize(v, jsonOptions),
                    v => string.IsNullOrEmpty(v) ? new List<ContentBlock>() : JsonSerializer.Deserialize<List<ContentBlock>>(v, jsonOptions)!)
                .HasColumnType("json")
                .HasDefaultValue("[]");

            // ForumPost Tags Configuration
            modelBuilder.Entity<ForumPost>()
                .Property(e => e.Tags)
                .HasConversion(
                    v => v == null || !v.Any() ? "[]" : JsonSerializer.Serialize(v, jsonOptions),
                    v => string.IsNullOrEmpty(v) ? new List<string>() : JsonSerializer.Deserialize<List<string>>(v, jsonOptions)!)
                .HasColumnType("json")
                .HasDefaultValue("[]");

            // ForumPost Relationships
            modelBuilder.Entity<ForumPost>()
                .HasOne(p => p.User)
                .WithMany()
                .HasForeignKey(p => p.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ForumPost>()
                .HasOne(p => p.Category)
                .WithMany()
                .HasForeignKey(p => p.CategoryId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ForumPost>()
                .HasOne(p => p.ModeratedByUser)
                .WithMany()
                .HasForeignKey(p => p.ModeratedBy)
                .OnDelete(DeleteBehavior.SetNull);

            // Indexes
            modelBuilder.Entity<ForumPost>()
                .HasIndex(p => p.CategoryId)
                .HasDatabaseName("idx_category");

            modelBuilder.Entity<ForumPost>()
                .HasIndex(p => p.UserId)
                .HasDatabaseName("idx_user");

            modelBuilder.Entity<ForumPost>()
                .HasIndex(p => new { p.Status, p.IsPinned })
                .HasDatabaseName("idx_status_pinned");

            modelBuilder.Entity<ForumPost>()
                .HasIndex(p => p.LastActivityAt)
                .HasDatabaseName("idx_last_activity");

            // FullText Search (MySQL specific)
            modelBuilder.Entity<ForumPost>()
                .HasIndex(p => p.Title)
                .HasDatabaseName("idx_search")
                .HasAnnotation("MySql:FullTextIndex", true);
        }
    }
}
```

## 3. Service Layer

### IForumService.cs
```csharp
using YourProject.Models;

namespace YourProject.Services
{
    public interface IForumService
    {
        Task<ForumPost> CreatePostAsync(CreateForumPostRequest request);
        Task<ForumPost?> GetPostByIdAsync(long id);
        Task<List<ForumPost>> GetPostsByCategoryAsync(long categoryId, int page = 1, int pageSize = 20);
        Task<ForumPost> UpdatePostAsync(long id, UpdateForumPostRequest request);
        Task<bool> DeletePostAsync(long id);
    }
}
```

### ForumService.cs
```csharp
using Microsoft.EntityFrameworkCore;
using YourProject.Data;
using YourProject.Models;

namespace YourProject.Services
{
    public class ForumService : IForumService
    {
        private readonly ApplicationDbContext _context;

        public ForumService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<ForumPost> CreatePostAsync(CreateForumPostRequest request)
        {
            var post = new ForumPost
            {
                CategoryId = request.CategoryId,
                UserId = request.UserId,
                Title = request.Title,
                Content = request.Content ?? new List<ContentBlock>(),
                Tags = request.Tags ?? new List<string>(),
                Status = "published"
            };

            _context.ForumPosts.Add(post);
            await _context.SaveChangesAsync();
            return post;
        }

        public async Task<ForumPost?> GetPostByIdAsync(long id)
        {
            return await _context.ForumPosts
                .Include(p => p.User)
                .Include(p => p.Category)
                .FirstOrDefaultAsync(p => p.Id == id);
        }

        public async Task<List<ForumPost>> GetPostsByCategoryAsync(long categoryId, int page = 1, int pageSize = 20)
        {
            return await _context.ForumPosts
                .Where(p => p.CategoryId == categoryId && p.Status == "published")
                .Include(p => p.User)
                .OrderByDescending(p => p.IsPinned)
                .ThenByDescending(p => p.LastActivityAt)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }

        public async Task<ForumPost> UpdatePostAsync(long id, UpdateForumPostRequest request)
        {
            var post = await _context.ForumPosts.FindAsync(id);
            if (post == null)
                throw new ArgumentException($"Post with ID {id} not found");

            post.Title = request.Title ?? post.Title;
            post.Content = request.Content ?? post.Content;
            post.Tags = request.Tags ?? post.Tags;
            post.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return post;
        }

        public async Task<bool> DeletePostAsync(long id)
        {
            var post = await _context.ForumPosts.FindAsync(id);
            if (post == null)
                return false;

            _context.ForumPosts.Remove(post);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}
```

## 4. DTOs/Requests

### CreateForumPostRequest.cs
```csharp
using System.ComponentModel.DataAnnotations;
using YourProject.Models;

namespace YourProject.DTOs
{
    public class CreateForumPostRequest
    {
        [Required]
        public long CategoryId { get; set; }

        [Required]
        public long UserId { get; set; }

        [Required]
        [StringLength(255)]
        public string Title { get; set; } = string.Empty;

        public List<ContentBlock>? Content { get; set; }

        public List<string>? Tags { get; set; }
    }
}
```

### UpdateForumPostRequest.cs
```csharp
using System.ComponentModel.DataAnnotations;
using YourProject.Models;

namespace YourProject.DTOs
{
    public class UpdateForumPostRequest
    {
        [StringLength(255)]
        public string? Title { get; set; }

        public List<ContentBlock>? Content { get; set; }

        public List<string>? Tags { get; set; }
    }
}
```

## 5. Controller

### ForumController.cs
```csharp
using Microsoft.AspNetCore.Mvc;
using YourProject.DTOs;
using YourProject.Models;
using YourProject.Services;

namespace YourProject.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ForumController : ControllerBase
    {
        private readonly IForumService _forumService;

        public ForumController(IForumService forumService)
        {
            _forumService = forumService;
        }

        [HttpPost]
        public async Task<ActionResult<ForumPost>> CreatePost([FromBody] CreateForumPostRequest request)
        {
            try
            {
                var post = await _forumService.CreatePostAsync(request);
                return CreatedAtAction(nameof(GetPost), new { id = post.Id }, post);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ForumPost>> GetPost(long id)
        {
            var post = await _forumService.GetPostByIdAsync(id);
            if (post == null)
                return NotFound();

            return Ok(post);
        }

        [HttpGet("category/{categoryId}")]
        public async Task<ActionResult<List<ForumPost>>> GetPostsByCategory(long categoryId, int page = 1, int pageSize = 20)
        {
            var posts = await _forumService.GetPostsByCategoryAsync(categoryId, page, pageSize);
            return Ok(posts);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult<ForumPost>> UpdatePost(long id, [FromBody] UpdateForumPostRequest request)
        {
            try
            {
                var post = await _forumService.UpdatePostAsync(id, request);
                return Ok(post);
            }
            catch (ArgumentException ex)
            {
                return NotFound(ex.Message);
            }
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> DeletePost(long id)
        {
            var result = await _forumService.DeletePostAsync(id);
            if (!result)
                return NotFound();

            return NoContent();
        }
    }
}
```

## 6. Program.cs Configuration

```csharp
using Microsoft.EntityFrameworkCore;
using YourProject.Data;
using YourProject.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Database Configuration
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseMySql(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        new MySqlServerVersion(new Version(8, 0, 33))
    ));

// Service Registration
builder.Services.AddScoped<IForumService, ForumService>();

var app = builder.Build();

// Configure pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();
```

## 7. Ví dụ sử dụng

### Tạo Post với Mixed Content
```csharp
var createRequest = new CreateForumPostRequest
{
    CategoryId = 1,
    UserId = 123,
    Title = "Hướng dẫn trồng rau sạch",
    Content = new List<ContentBlock>
    {
        new ContentBlock { Order = 1, Type = "text", Content = "Xin chào các bạn, hôm nay tôi sẽ chia sẻ..." },
        new ContentBlock { Order = 2, Type = "image", Content = "https://example.com/rau-sach.jpg" },
        new ContentBlock { Order = 3, Type = "text", Content = "Bước đầu tiên là chuẩn bị đất..." },
        new ContentBlock { Order = 4, Type = "video", Content = "https://youtube.com/watch?v=abc123" }
    },
    Tags = new List<string> { "rau sạch", "nông nghiệp", "hướng dẫn" }
};

// POST /api/forum
var response = await httpClient.PostAsJsonAsync("/api/forum", createRequest);
```

### Hiển thị Content trong Frontend
```csharp
// Trong Razor View hoặc Blazor Component
@foreach (var block in post.Content.OrderBy(c => c.Order))
{
    @if (block.Type == "text")
    {
        <p>@block.Content</p>
    }
    else if (block.Type == "image")
    {
        <img src="@block.Content" alt="Post image" class="img-fluid" />
    }
    else if (block.Type == "video")
    {
        <iframe src="@block.Content" width="560" height="315" frameborder="0"></iframe>
    }
}
```

## 8. Lưu ý quan trọng

1. **Migration**: Chạy `Add-Migration` và `Update-Database` sau khi setup
2. **JSON Serialization**: Sử dụng `System.Text.Json` thay vì `Newtonsoft.Json` trong .NET 8
3. **Performance**: Với JSON lớn, consider pagination và lazy loading
4. **Validation**: Thêm validation cho ContentBlock types và content
5. **Security**: Sanitize HTML content nếu cho phép rich text

## 9. Package Dependencies

```xml
<PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.0" />
<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.0" />
<PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="8.0.0" />
<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0" />
```

Với setup này, bạn có thể lưu và truy xuất content dưới dạng structured JSON trong MySQL một cách dễ dàng!